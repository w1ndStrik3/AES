-- This program generates round keys for the key schedule.
-- Completion time: 3 cycles

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity rkey_gen is
	port ( 
		clk : in std_logic;
		rst_rkg : in std_logic; -- Start round key generation
		round_index : in integer;
		rounds : in integer; -- Specify 10, 12 or 14 in testbench
	    input_rkg : in std_logic_vector(127 downto 0);
		w_g : inout std_logic_vector(31 downto 0); -- Word after g-function
		output_rkg : out std_logic_vector(127 downto 0);
		done_rkg : out std_logic -- Finish round key generation
	);
end rkey_gen;

architecture behavioral of rkey_gen is
	
	signal step_count : integer := 0; -- Keeps track of current step
	signal rot_word : std_logic_vector(127 downto 0);
	signal padding : std_logic_vector(127 downto 0) := (others => '0');
	signal input_length_s : integer := 3;
	signal output_sb : std_logic_vector(127 downto 0);
	
	type word is array(0 to 3) of std_logic_vector(31 downto 0);
	signal w : word;
	
	-- Round constants
	type round_constants is array(1 to rounds) of std_logic_vector(7 downto 0); 
	constant rcon : round_constants := ( x"01", -- Round 1
									     x"02", -- Round 2
									     x"04", -- Round 3
									     x"08", -- Round 4
									     x"10", -- Round 5
									     x"20", -- Round 6
									     x"40", -- Round 7
								         x"80", -- Round 8
									     x"1b", -- Round 9
									     x"36" ); -- Round 10
																						
	-- S-box
	component sub_bytes is
		port 
		(
			input_sb : in std_logic_vector(127 downto 0);
			output_sb : out std_logic_vector(127 downto 0);
			clk : in std_logic;
			input_length : in integer
		);
	end component;

begin

	w <= (input_rkg(127 downto 96), input_rkg(95 downto 64), input_rkg(63 downto 32), input_rkg(31 downto 0));
	
	sbox_instance : sub_bytes port map
	(
		input_sb => rot_word,
		output_sb => output_sb,
		clk => clk,
		input_length => input_length_s
	);
	
	process(clk) 
	begin
		if rising_edge(clk) then
		
			-- Reset
			if rst_rkg = '1' then
				done_rkg <= '0';
				-- Rotate word (shift each byte in word left by one)
				rot_word <= padding & w(3)(23 downto 0) & w(3)(31 downto 24); 
				step_count <= 1;
			
			elsif step_count = 1 then
				-- Add round constant
				w_g <= output_sb(31 downto 0) XOR (rcon(round_index) & x"000000");
				step_count <= 2;
			
			elsif step_count = 2 then
				-- 4 words always for round keys
				w(0) <= w(0) XOR w_g; -- w4
				w(1) <= w(1) XOR (w(0) XOR w_g); -- w5
				w(2) <= w(2) XOR (w(1) XOR (w(0) XOR w_g)); -- w6
				w(3) <= w(3) XOR (w(2) XOR (w(1) XOR (w(0) XOR w_g))); -- w7
				
				output_rkg <= w(0) & w(1) & w(2) & w(3);
				done_rkg <= '1';
			
			else
				done_rkg <= '0';
			end if;
		end if;
	end process;
	
end architecture;